from argparse import ArgumentParser
from flask import (Flask, Response,
                   render_template, request, send_from_directory)
from typing import Any, Dict, Union
from src.coursereg_history.api import get_all_data
import os

app = Flask(__name__)


@app.context_processor
def context_processor() -> Dict[Any, Any]:
    """
    Context processor function for the Flask app.

    This function provides additional variables to be
    automatically available in all Jinja templates
    rendered by the Flask app.
    """
    return dict(get_filename=get_filename,
                pdf_exists=pdf_exists)


@app.route('/', methods=['GET', 'POST'])
def history() -> str:
    """
    Display course history based on the selected
    academic year, semester, and course type.

    Returns:
        str: The rendered HTML content to display the course history.
    """

    # Adjust the default parameters as necessary.
    year = request.form.get('year', '2324')
    semester = request.form.get('semester', '1')
    type = request.form.get('type', 'ug')

    output, error = [], None
    try:
        output = get_all_data(year, semester, type)
    except ValueError as e:
        error = e

    return render_template('history.html', output=output, error=error)


pdf_directory = os.path.abspath(
        os.path.join(os.path.dirname(__file__),
                     '../coursereg_history/data/pdfs'))


def get_filename(year: Union[str, int],
                 semester: Union[str, int],
                 type: str,
                 round_num: Union[str, int]) -> str:
    """
    Generate the filename for a PDF file based on
    the provided year, semester, type, and round number.

    Parameters:
        year (str): The academic year of the course.
        semester (str): The semester of the course.
        type (str): The type of the course (e.g., undergraduate or graduate).
        round_num (int): The round number of the course.

    Returns:
        str: The generated filename in the format
        "{year}/{semester}/{type}/round_{round_num}.pdf".

    Example:
        get_filename(year='2324', semester='1', type='ug', round_num=1)
        Output: "2324/1/ug/round_1.pdf"
    """
    return f'{year}/{semester}/{type}/round_{round_num}.pdf'


def pdf_exists(filename: str) -> bool:
    """
    Check if a PDF file with the given filename
    exists in the specified directory.

    Parameters:
        filename (str): The filename of the PDF file to check.

    Returns:
        bool: True if the file exists, False otherwise.

    Example:
        pdf_exists(filename='2324/1/ug/round_1.pdf')
        Output: True
    """
    file_path = os.path.join(pdf_directory, filename)
    return os.path.isfile(file_path)


@app.route('/pdfs/<path:filename>')
def serve_pdf(filename: str) -> Response:
    """
    Serve a PDF file from the specified directory.

    Parameters:
        filename (str): The filename of the PDF file to serve.

    Returns:
        File: The PDF file to be served.

    Note:
    - The 'filename' parameter should be in
      the format "{year}/{semester}/{type}/round_{round_num}.pdf",
      as generated by the 'get_filename' function.
    """
    return send_from_directory(pdf_directory, filename)


if __name__ == '__main__':
    parser = ArgumentParser(description='Web app for NUS Tools')
    parser.add_argument('--port', type=int, nargs=1, default=5000,
                        help='Port where the app is run.')
    args = parser.parse_args()

    app.run(host='0.0.0.0', port=args.port, debug=True)
